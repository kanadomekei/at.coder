import itertools 
#累積和を計算
iterable=[3, 4, 6, 2, 1, 9, 0, 7, 5, 8]
list(accumulate(iterable)) #[3, 7, 13, 15, 16, 25, 25, 32, 37, 45]
iterable_S=["A", "B", "C", "D", "E"]
list(accumulate(iterable_S)) #['A', 'AB', 'ABC', 'ABCD', 'ABCDE

#累積最小値
list(accumulate(iterable, func=min)) #[3, 3, 3, 2, 1, 1, 0, 0, 0, 0]

#累積最大値
list(accumulate(iterable, func=max)) #[3, 4, 6, 6, 6, 9, 9, 9, 9, 9]

#累積積
import operator
list(accumulate(iterable, func=operator.mul)) #[3, 12, 72, 144, 144, 1296, 0, 0, 0, 0]

#二次元配列を平坦化
l=[[0, 1, 2], [3, 2, 4], [4, 1, 5]]
list(chain.from_iterable(l)) #[0, 1, 2, 3, 2, 4, 4, 1, 5]

#リストから順列を生成
l=("A", "B", "C", "D")
list(permutations(l, 2))
[('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'A'), ('B', 'C'), ('B', 'D'), ('C', 'A'), ('C', 'B'), ('C', 'D'), ('D', 'A'), ('D', 'B'), ('D', 'C')]
["".join(i) for i in list(permutations(l, 2))]
['AB', 'AC', 'AD', 'BA', 'BC', 'BD', 'CA', 'CB', 'CD', 'DA', 'DB', 'DC']

list(permutations(range(4), 2))
[(0, 1), (0, 2), (0, 3), (1, 0), (1, 2), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 2)]
n = 4
list(permutations(range(1, n + 1)))
[(1, 2, 3, 4) (1, 2, 4, 3) (1, 3, 2, 4) (1, 3, 4, 2) (1, 4, 2, 3) (1, 4, 3, 2) (2, 1, 3, 4) (2, 1, 4, 3) (2, 3, 1, 4) (2, 3, 4, 1) (2, 4, 1, 3) (2, 4, 3, 1) (3, 1, 2, 4) (3, 1, 4, 2)]

#リストから組み合わを生成
l = ['a', 'b', 'c', 'd']
c = list(itertools.combinations(l, 2))
# [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]

1= [0, 1, 2, 3]
c = list(combinations(1, 2))
#[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]

list(combinations(range(1, 5), 3))
# [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]

#リストから重複組み合わを生成
c = list(itertools.combinations_with_replacement(l, 2))
# [('a', 'a'), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'b'),
 ('b', 'c'), ('b', 'd'), ('c', 'c'), ('c', 'd'), ('d', 'd')]

list(combinations_with_replacement(range(4),2))
# [(0, 0), (0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]

# 直積の要素を全列挙する
iterable1=[0, 1]
iterable2=[2, 3]
list(product(iterable1, iterable2))# [(0, 2), (0, 3), (1, 2), (1, 3)]

list(product(iterable1, repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]

list(product(iterable1, iterable2, repeat=2))
[(0, 2, 0, 2), (0, 2, 0, 3), (0, 2, 1, 2), (0, 2, 1, 3), (0, 3, 0, 2), (0, 3, 0, 3), (0, 3, 1, 2), (0, 3, 1, 3), (1, 2, 0, 2), (1, 2, 0, 3), (1, 2, 1, 2), (1, 2, 1, 3), (1, 3, 0, 2), (1, 3, 0, 3), (1, 3, 1, 2), (1, 3, 1, 3)]

#bit全探索
n = 3
print(list(product(range(2), repeat=n)))
# [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]

#文字列からアナグラム(文字列の並び替え)を作成
s = 'arc'
anagram_list = [''.join(v) for v in itertools.permutations(s)]

#ランレングス圧縮の実装
from itertools import  groupby
l = [1, 1, 2, 2, 2, 4, 4, 4, 5]
[[key,len(list(group))] for key,group in groupby(l)]
# [[1, 2], [2, 3], [4, 3], [5, 1]]

l = ['A', 'A', 'F', 'F', 'F', 'E', 'E']
[[key,len(list(group))] for key,group in groupby(l)]
#[['A', 2], ['F', 3], ['E', 2]]



