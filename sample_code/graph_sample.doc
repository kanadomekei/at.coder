#グラフGに対して、頂点を始点とした幅優先探索
#返り値:各頂点への頂点Sからの最短距離
def bfs(g, s):
    que = Queue() #todoリストを表すキュー
    dist = [-1] #len(g) #dist[v]は始点sから頂点への最短経路長
    que.put(s)
    dist[s] = 0 #最初の始点sをtodoリストにセットする

    #todoリストがからになるまで探索する
    while not que.empty():
        v = que.get() #todoリストから頂点vを取り出す

        #vに直接つながる頂点を探索
        for v2 in g[v]:
            if dist[v2] != -1: #v2がすでに探索済みの場合はスキップする
                continue
            que.put(v2) #v2を新たにtodoリストに追加
            dist[v2] = dist[v] + 1
    return dist

#迷路に幅優先探索を使用
from collections import deque

r, c = map(int, input().split())
sy, sx = map(int, input().split())
gy, gx = map(int, input().split())
l = [list(input()) for _ in range(c)]

sy, sx, gy, gx = sy - 1, sx - 1, gy - 1, gx - 1
dist = [[-1 for j in range(c)] for i in range(r)]
dist[sy][sx] = 0
q = deque([sy, sx])#キューを用意して、始点を入れる


while len(q) > 0:#キューから取り出して探索する
    i, j = q.popleft()
    #4つの隣マスを確認する
    for ni, nj in [[i+1, j], [i-1, j], [i, j+1], [i, j-1]]:
        if not(0 <= ni < r and 0 <= nj < c):
            continue
        if l[i][j] == '#':
            continue
        if dist[ni][nj] == -1:
            dist[ni][nj] = dist[i][j] + 1
            q.append([ni,nj])
print(dist[gy][gx])

#深さ優先探索
import sys
sys.setrecursionlimit(10000000)
# n = 頂点数, e = 辺情報, s = 始点
visited = [False for _ in range(n)]

def dfs(i):
    visited[i] = True
    for j in e[i]:
        if not visited[j]:
            dfs(j)

#迷路に深さ優先探索を使用
s = [list(input()) for _ in range(h)]
visited =  [[False for j in range(w)] for i in range(h)]
def dfs(i, j): #スタート地点を引数にする
    visited[i][j] = True
    #4方向の隣りマスを探索する
    for ni, nj in [[i+1, j], [i-1, j], [i, j+1], [i, j-1]]:
        #もし盤面の範囲内でなければ無視する
        if not( 0 <= ni < h and 0 <= nj < w):
            continue
        #もし壁マスであれば無視する
        if s[i][j] == '#':
            continue
        #もし未訪問であれば再帰的に呼び出す
        if not visited[ni][nj]:
            dfs(ni, nj)
    


