import math
from scipy.special import perm
from scipy.special import comb
import itertools
from itertools import accumulate
from fractions import gcd

#階乗の計算
math.factorial(5)

#順列の計算 p = n! / (n - r)!
def permutations_count(n, r):
    return math.factorial(n) // math.factorial(n - r)
permutations_count(4, 2)
perm(4, 2, exact=True)

#組み合わせの計算 c = n! / (r! * (n - r)!)
def combinations_count(n, r):
    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))
combinations_count(4, 2)
comb(4, 2, exact=True)

#重複組み合わせの計算 
# 重複組み合わせは、異なるn個のものから重複を許してr個選ぶ場合の数。
def combinations_with_replacement_count(n, r):
    return combinations_count(n + r - 1, r)
combinations_with_replacement_count(4, 2)
comb(4, 2, exact=True, repetition=True)

#累積和を計算
from itertools import accumulate
a=[1,4,3,4,6,5]
list(accumulate(a))#[1, 5, 8, 12, 18, 23]

#最大公約数を計算
gcd(78,17) 

