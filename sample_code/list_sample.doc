#二次元配列の初期化
l = [[False for j in range(n)] for i in range(n)]
print(l)

#偶数番目の要素を取得する
l = [0,1,2,3,4,5]
l[0::2] #[0, 2, 4]

#着数番目の要素を取得する
l = [0,1,2,3,4,5]
l[1::2] #[1, 3, 5]

#条件を満たす要素だけのリストを作成
l = list(filter(lambda x : x > 0, l) 

#リストの順序(大小)比較
#Pythonにおけるリストオブジェクトの順序（大小）比較は、最初の等しくない要素に対して行われる。
[100] > [-100] #True
[1, 2, 100] > [1, 2, -100] #True
[1, 2, 100] > [1, 100] #False

#二次元配列のソート
a = [[20, 'A'], [10, 'B'], [20, 'B'], [10, 'A']]
a.sort() #昇順ソート
print(a) #[[10, 'A'], [10, 'B'], [20, 'A'], [20, 'B']]
a.sort(reverse=True)#降順ソート
print(a) #[[20, 'B'], [20, 'A'], [10, 'B'], [10, 'A']]

#比較する要素を指定してソート
a = [['A', 2], ['B', 3], ['C', 1]]
a.sort(key=lambda x: x[1]) #昇順ソート
print(a) #[['C', 1], ['A', 2], ['B', 3]]
a.sort(key=lambda x: x[1], reverse=True) #降順ソート
print(a) #[('B', 3), ('A', 2), ('C', 1)]

#多次元リストを複数キーでソートする(昇順)
data = [['きゅうり',1,4],['いちご',2,6],['にんじん',2,1],['とうふ',1,0]]
#昇順でソートする
sorted_data = sorted(data, key=lambda x:(x[1], x[2]))
sorted_data #[['とうふ',1,0],['きゅうり',1,4],['にんじん',2,1],['いちご',2,6]]


