from collections import deque

#dequeを初期化
d = deque()
d = deque('a')

#データを追加
d.append('b') #deque(['a', 'b'])
d.appendleft('c') #deque(['c', 'a', 'b'])

#要素の取り出し
d.pop() # b
d.popleft() # c

#要素の反転
d.reverse()

#要素の数え上げ
d.count(5)

#要素の位置を特定
d.index(2)


#キューで行われる操作
l = [0,1,2,3]
q = deque(l)
q.append(4) #後ろから4を挿入, l=deque([0,1,2,3,4])
q.appendleft(5)#前から5を挿入, l=deque([5,0,1,2,3,4])
x = q.pop() #後ろの要素を取り出す, x=4, l=deque([5,0,1,2,3])
y = q.popleft() #前の要素を取り出す, y=5, l = deque([0,1,2,3])


#heapの実装
#最小値を高速で取り出せるデータ構造
import heapq
a = [1, 6, 8, 0, -1]
print(type(a))  # <class 'list'>

heapq.heapify(a)
print(type(a))  # <class 'list'>

a = [1, 6, 8, 0, -1]
heapq.heapify(a)  # リストを優先度付きキューへ
print(a)
# 出力: [-1, 0, 8, 1, 6] (優先度付きキューとなった a)

print(heapq.heappop(a))  # 最小値の取り出し
# 出力: -1 (a の最小値)
print(a)
# 出力: [0, 1, 8, 6] (最小値を取り出した後の a)

heapq.heappush(a, -2)  # 要素の挿入
print(a)
# 出力: [-2, 0, 1, 8, 6]  (-2 を挿入後の a)