#数字が1つ
n = input()

#文字列が一つ
s = input()

#数字が2つ以上を別々に受け取り
s, t = map(int, input().split())

#文字列が2つ以上を別々に受け取り
s, t = map(str, input().split())

#リストで受け取り
l = list(map(int, input().split()))
l = list(input() for _ in range(n))

#二次元配列の受け取り
l = list(list(map(int,input().split())) for i in range(n))
l = [list(input()) for _ in range(n)]

#二次元配列を隣接リストとして受け取り 辺の重みがない場合
n, m = map(int, input().split())
g = [[] for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    g[a-1].append(b-1)
    g[b-1].append(a-1)  
# [[2, 3, 5], ..., [1, 3, 4]]

#二次元配列を隣接リストして受け取り 辺の重みがある場合
n, m = map(int, input().split())
g = [[] for _ in range(n)]
for _ in range(n):
    u, v, w = map(int, input().split())
    g[u-1].append([v-1, w])
    g[v-1].append([u-1, w])  # 有向グラフなら消す
# [[2, 3], [3, 1], [5, 9]], ..., [...]]

#二次元配列を隣接行列して受け取り 辺の重みがない場合
n, m = map(int, input().split())
g = [[0]*n for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    g[a-1][b-1] = 1
    g[b-1][a-1] = 1  # 有向グラフなら消す
# [[0, 1, 1, 0, 1], ..., [1, 0, 1, 1, 0]]

#二次元配列を隣接行列して受け取り 辺の重みがある場合
n, m = map(int, input().split())
g = [[0]*n for _ in range(n)]
for _ in range(m):
    u, v, w = map(int, input().split())
    g[u-1][v-1] = w
# [[0, 2, 3, 0, 1], ..., [2, 0, 3, 0, 0]


