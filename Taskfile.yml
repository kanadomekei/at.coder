version: '3'

vars:
  LANG_GO: go
  LANG_RUST: rust
  LANG_ZIG: zig
  LANG_CPP: cpp
  SUPPORTED_LANGS: "go, rust, zig, cpp"
  DEFAULT_LANGS: "go rust zig cpp"

tasks:

  new:
    desc: "Create a new contest directory in ./ABC/ using acc. Usage: task new -- <contest_id> [lang1 lang2 ...]"
    dir: ABC
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task new -- <contest_id> [{{.SUPPORTED_LANGS}}]"
          echo "Examples:"
          echo "  task new -- abc300           # Create all languages"
          echo "  task new -- abc300 rust      # Create only Rust"
          echo "  task new -- abc300 go rust   # Create Go and Rust"
          exit 1
        fi
        
        ARGS=({{.CLI_ARGS}})
        CONTEST_ID="${ARGS[0]}"
        
        # Create contest directory with acc
        acc new $CONTEST_ID
        
        # Update Rust package names to use contest ID and problem letter
        cd $CONTEST_ID
        
        # First, update all package names to avoid conflicts
        for problem_dir in */; do
          if [ -d "$problem_dir" ]; then
            if [ -f "$problem_dir/rust/Cargo.toml" ]; then
              problem_letter=$(basename "$problem_dir")
              package_name="$CONTEST_ID-$problem_letter"
              sed -i '' "s/name = \".*\"/name = \"$package_name\"/" "$problem_dir/rust/Cargo.toml"
              echo "Updated Rust package name to $package_name in $problem_dir"
            fi
          fi
        done
        
        # Then, add dependencies to all projects
        for problem_dir in */; do
          if [ -d "$problem_dir" ]; then
            if [ -f "$problem_dir/rust/Cargo.toml" ]; then
              echo "Adding dependencies to $problem_dir"
              cd "$problem_dir/rust"
              cargo add proconio@0.3.6 --quiet || true
              cargo add itertools@0.9.0 --quiet || true
              cd ../..
            fi
          fi
        done
        
        cd ..
        
        # If specific languages are specified, remove unwanted language directories
        if [ ${#ARGS[@]} -gt 1 ]; then
          SPECIFIED_LANGS=("${ARGS[@]:1}")
          
          # Navigate to contest directory
          cd $CONTEST_ID
          
          # Find all problem directories (a, b, c, d, etc.)
          for problem_dir in */; do
            if [ -d "$problem_dir" ]; then
              cd "$problem_dir"
              
              # Remove language directories not specified
              for lang_dir in go rust zig cpp; do
                if [ -d "$lang_dir" ]; then
                  # Check if this language was specified
                  keep_lang=false
                  for specified_lang in "${SPECIFIED_LANGS[@]}"; do
                    if [ "$lang_dir" = "$specified_lang" ]; then
                      keep_lang=true
                      break
                    fi
                  done
                  
                  # Remove if not specified
                  if [ "$keep_lang" = false ]; then
                    rm -rf "$lang_dir"
                    echo "Removed $problem_dir$lang_dir"
                  else
                    echo "Kept $problem_dir$lang_dir"
                  fi
                fi
              done
              
              cd ..
            fi
          done
          
          cd ..
        fi

  lint:
    desc: "Lint code in the current directory."
    dir: '{{.PWD}}'
    cmds:
      - |
        if [ -f main.go ]; then
          echo "Linting Go code..."
          go vet ./...
        elif [ -f Cargo.toml ]; then
          echo "Linting Rust code..."
          cargo clippy
        elif [ -f main.zig ]; then
          echo "Linting Zig code..."
          zig build-exe main.zig && rm -f main main.o
        elif [ -f main.cpp ]; then
          echo "Linting C++ code..."
          g++ -Wall -Wextra -std=c++17 -o main main.cpp && rm -f main
        else
          echo "No supported language files found to lint (supported: {{.SUPPORTED_LANGS}})"
          exit 1
        fi

  test:
    desc: "Formats, lints, and tests the solution."
    dir: '{{.PWD}}'
    cmds:
      - task: fmt
      - task: lint
      - |
        if [ -f main.go ]; then
          echo "Testing Go code..."
          go build -o main main.go
          oj test -d ../tests -c "./main" > result.txt
          rm -f main
        elif [ -f Cargo.toml ]; then
          echo "Testing Rust code..."
          cargo build --release
          oj test -d ../tests -c "./target/release/__tmp_cargo_proj" > result.txt
        elif [ -f main.zig ]; then
          echo "Testing Zig code..."
          zig build-exe main.zig -O ReleaseFast -femit-bin=./main
          oj test -d ../tests -c "./main" > result.txt
          rm -f main main.o
        elif [ -f main.cpp ]; then
          echo "Testing C++ code..."
          g++ -std=c++17 -O2 -o main main.cpp
          oj test -d ../tests -c "./main" > result.txt
          rm -f main
        else
          echo "No supported language files found to test (supported: {{.SUPPORTED_LANGS}})"
          exit 1
        fi

  submit:
    desc: "Submit the solution in the current directory using acc."
    dir: '{{.PWD}}'
    cmds:
      - |
        if [ -f main.go ]; then
          echo "Submitting Go code..."
          acc submit main.go
        elif [ -f Cargo.toml ]; then
          echo "Submitting Rust code..."
          acc submit
        elif [ -f main.zig ]; then
          echo "Submitting Zig code..."
          acc submit main.zig
        elif [ -f main.cpp ]; then
          echo "Submitting C++ code..."
          acc submit main.cpp
        else
          echo "No supported language files found to submit (supported: {{.SUPPORTED_LANGS}})"
          exit 1
        fi

  practice:
    desc: "Create a practice directory with language templates. Usage: task practice -- <name> [lang1 lang2 ...]"
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Usage: task practice -- <practice_name> [{{.SUPPORTED_LANGS}}]"
          echo "Examples:"
          echo "  task practice -- algorithms        # Create all languages"
          echo "  task practice -- dp rust           # Create only Rust"
          echo "  task practice -- graph go rust     # Create Go and Rust"
          exit 1
        fi
        
        ARGS=({{.CLI_ARGS}})
        NAME="${ARGS[0]}"
        PRACTICE_DIR="practice/$NAME"
        mkdir -p "$PRACTICE_DIR"
        
        # Copy notes.md template if it doesn't exist
        if [ ! -f "$PRACTICE_DIR/notes.md" ]; then
          if [ -f "templates/default/notes.md" ]; then
            cp "templates/default/notes.md" "$PRACTICE_DIR/"
            echo "Created $PRACTICE_DIR/notes.md"
          else
            echo "Warning: notes.md template not found, skipping"
          fi
        else
          echo "notes.md already exists, skipping"
        fi
        
        # If no specific languages specified, create all
        if [ ${#ARGS[@]} -eq 1 ]; then
          LANGS=({{.DEFAULT_LANGS}})
        else
          LANGS=("${ARGS[@]:1}")
        fi
        
        for lang in "${LANGS[@]}"; do
          case $lang in
            go)
              if [ ! -d "$PRACTICE_DIR/go" ]; then
                mkdir -p "$PRACTICE_DIR/go"
                cp "templates/default/go/main.go" "$PRACTICE_DIR/go/"
                cd "$PRACTICE_DIR/go"
                go mod init main
                cd - > /dev/null
                echo "Created $PRACTICE_DIR/go"
              else
                echo "$PRACTICE_DIR/go already exists, skipping"
              fi
              ;;
            rust)
              if [ ! -d "$PRACTICE_DIR/rust" ]; then
                mkdir -p "$PRACTICE_DIR/rust"
                cd "$PRACTICE_DIR/rust"
                cargo init --name "practice-$NAME" .
                cp "../../../templates/default/rust/src/main.rs" "src/main.rs"
                cargo add proconio@0.3.6
                cargo add itertools@0.9.0
                cd - > /dev/null
                echo "Created $PRACTICE_DIR/rust"
              else
                echo "$PRACTICE_DIR/rust already exists, skipping"
              fi
              ;;
            zig)
              if [ ! -d "$PRACTICE_DIR/zig" ]; then
                mkdir -p "$PRACTICE_DIR/zig"
                cp "templates/default/zig/main.zig" "$PRACTICE_DIR/zig/"
                echo "Created $PRACTICE_DIR/zig"
              else
                echo "$PRACTICE_DIR/zig already exists, skipping"
              fi
              ;;
            cpp)
              if [ ! -d "$PRACTICE_DIR/cpp" ]; then
                mkdir -p "$PRACTICE_DIR/cpp"
                cp "templates/default/cpp/main.cpp" "$PRACTICE_DIR/cpp/"
                echo "Created $PRACTICE_DIR/cpp"
              else
                echo "$PRACTICE_DIR/cpp already exists, skipping"
              fi
              ;;
            *)
              echo "Unknown language: $lang. Supported: {{.SUPPORTED_LANGS}}"
              ;;
          esac
        done
        
        echo "Practice directory created at $PRACTICE_DIR"

  fmt:
    desc: "Format code in the current directory."
    dir: '{{.PWD}}'
    cmds:
      - |
        if [ -f main.go ]; then
          echo "Formatting Go code..."
          gofmt -w .
        elif [ -f Cargo.toml ]; then
          echo "Formatting Rust code..."
          cargo fmt
        elif [ -f main.zig ]; then
          echo "Formatting Zig code..."
          zig fmt main.zig
        elif [ -f main.cpp ]; then
          echo "Formatting C++ code..."
          clang-format -i main.cpp
        else
          echo "No supported language files found to format (supported: {{.SUPPORTED_LANGS}})"
          exit 1
        fi
